for(i in 1:3){
for(j in 1:3){
out[count] = tt[i,j]/160*log(tt[i,j]/160/((sum(tt[i,] + tt[,j]))/160))
count = count+1
}
}
out
sum(tt[3,]+tt[,3])/160
tt[3,3]/160
for(i in 1:3){
for(j in 1:3){
out[count] = tt[i,j]/160*log(tt[i,j]/((sum(tt[i,] + tt[,j]))))
count = count+1
}
}
out
out <- rep(NA,9)
count = 0
for(i in 1:3){
for(j in 1:3){
out[count] = tt[i,j]/160*log(tt[i,j]/sum(tt[i,] + tt[,j]))
count = count+1
}
}
out
count = 1
for(i in 1:3){
for(j in 1:3){
out[count] = tt[i,j]/160*log(tt[i,j]/sum(tt[i,] + tt[,j]))
count = count+1
}
}
out
sum(out)
1.59/(sqrt(1.02*.99))
sum(tt)
tt
24/160
13+10
23/160
.15/.14375
log(.15/.14375)
log(.15/.14375)*.15
(tt[i,j]/160)
i
j
64/160
for(i in 1:3){
for(j in 1:3){
out[count] = (tt[i,j]/160)*log(tt[i,j]/sum(tt[i,] + tt[,j]))
count = count+1
}
}
out
count = 1
for(i in 1:3){
for(j in 1:3){
out[count] = (tt[i,j]/160)*log(tt[i,j]/sum(tt[i,] + tt[,j]))
count = count+1
}
}24+8+13
24+8+13
42
42+45
library(fda.usc)
min.basis
?min.basis
nb <- seq(5,120,length.out=20)
nb
S.basis
min.basis
type.CV
??vec2Lfd
S.basis
library(fda.usc)
S.basis
getbasispenalty
min.basis
S.basis
getbasispenalty
bsplinepen(basisobj, 2)
bsplinepen(create.bspline.basis, 2)
bsplinepen(create.bspline.basis(c(0,1), 5), 2)
bsplinepen(create.bspline.basis(c(0,1), 5), vec2Lfd(c(0,0)))
bsplinepen(create.bspline.basis(c(0,1), 5), int2Lfd(2))
?int2Lfd
bsplinepen(create.bspline.basis(c(0,10), 5), int2Lfd(2))
(1:110)/119
(1:110)/110
(0:109)/109
bsplinepen(create.bspline.basis(c(0,1), 5), int2Lfd(2))
bsplinepen(create.bspline.basis(c(1,2), 5), int2Lfd(2))
bsplinepen(create.bspline.basis(1, 5), int2Lfd(2))
bsplinepen(create.bspline.basis(c(1,2), 5), vec2Lfd(c(0,0)))
bsplinepen(create.bspline.basis(c(1,2), 5), vec2Lfd(c(0,0), c(0,1)))
bsplinepen(create.bspline.basis(c(1,2), 5), vec2Lfd(c(0,0), c(0,10)))
?vec2Lfd
bsplinepen(create.bspline.basis(c(1,2), 5), vec2Lfd(c(0,0), rangeval = c(0,10)))
bsplinepen(create.bspline.basis(c(1,2), 5), vec2Lfd(c(0,0), rangeval = c(0,100)))
siskel <- c(24,8,13,8,13,11,10,9,64)
siskel <- c(45,32,83)
ebert <- c(42,30,88)
?log2
45/160*log2(45/160)
45/160*log2(45/160) +32/160*log2(32/160) + 83/160*log2(83/160)
42/160*log2(42/160) +30/160*log2(30/160) + 88/160*log2(88/160)
24/160*log2(24/(42+45))+8/160*log2(8/(30+45))+13/160*log2(13/(88+45))+
8/160*log2(8/(42+32))+13/160*log2(13/(30+32))+11/160*log2(11/(88+32))+
10/160*log2(10/(42+83))+9/160*log2(9/(30+83))+64/160*log2(64/(88+83))
24/160*log(24/(42+45))+8/160*log(8/(30+45))+13/160*log(13/(88+45))+
8/160*log(8/(42+32))+13/160*log(13/(30+32))+11/160*log(11/(88+32))+
10/160*log(10/(42+83))+9/160*log(9/(30+83))+64/160*log(64/(88+83))
sqrt(1.47+1.43)
2.29/1.7029
log(.05*3/2)/(-2)*.005
5*10^4
5*10^4*4
5*10^4*4/.005
.0025/.005
.025/.005
.25/.005
50000/.005
1.1*.005/2
.1*.005/2
.00001*3/2
.005*log(.00001*3/2)
.005*log(.00001*3/2)/-2
.005*log(.00001*3/2)/2
.005*log(.00001*3/2)/-2
rnorm(1000,0,2)
sim <- rnorm(1000,0,2)
sd(sim)
mean(sim)
func <- function(x){
sin(x) + x^2 - 8*x
}
plot(1:100, func(1:100))
func <- function(x){
sin(x) #+ x^2 - 8*x
}
plot(1:100, func(1:100))
plot(1:100, func(1:100), type = l)
plot(1:100, func(1:100), type = 'l')
func <- function(x){
sin(x) + sqrt(x) - 8*x
}
plot(1:100, func(1:100), type = 'l')
func <- function(x){
sin(x) + sqrt(x) #- 8*x
}
plot(1:100, func(1:100), type = 'l')
func <- function(x){
sin(x) + sqrt(x) #- 8*x
}
plot(1:100, func(seq(1,2*pi,length.out = 100)), type = 'l')
func <- function(x){
sin(x) + sqrt(x) - 8*x
}
plot(1:100, func(seq(1,2*pi,length.out = 100)), type = 'l')
func <- function(x){
sin(x) + sqrt(x) - 2*x
}
plot(1:100, func(seq(1,2*pi,length.out = 100)), type = 'l')
func <- function(x){
sin(x) + sqrt(x) - 2*x + 3*(x^2-.1)
}
plot(1:100, func(seq(1,2*pi,length.out = 100)), type = 'l')
func <- function(x){
sin(x) + sqrt(x)# - 2*x + 3*(x^2-.1)
}
plot(1:100, func(seq(1,2*pi,length.out = 100)), type = 'l')
func <- function(x){
sin(x) + sqrt(x) - .05*x #+ 3*(x^2-.1)
}
plot(1:100, func(seq(1,2*pi,length.out = 100)), type = 'l')
func <- function(x){
sin(x) + sqrt(x) - .05*x^2 #+ 3*(x^2-.1)
}
plot(1:100, func(seq(1,2*pi,length.out = 100)), type = 'l')
func <- function(x){
sin(x) + sqrt(x) - .05*x^2 + tan(x) #+ 3*(x^2-.1)
}
plot(1:100, func(seq(1,2*pi,length.out = 100)), type = 'l')
func <- function(x){
sin(x) + sqrt(x) - .05*x^2 + tan(x+1) #+ 3*(x^2-.1)
}
plot(1:100, func(seq(1,2*pi,length.out = 100)), type = 'l')
func <- function(x){
sin(x) + sqrt(x) - .05*x^2 + cos(x+1) #+ 3*(x^2-.1)
}
plot(1:100, func(seq(1,2*pi,length.out = 100)), type = 'l')
func <- function(x){
sin(x) + sqrt(x) - .05*x^2 + cos(x+1) + 3*(x^2-.1)
}
plot(1:100, func(seq(1,2*pi,length.out = 100)), type = 'l')
func <- function(x){
sin(x) + sqrt(x) - .05*x^2 + cos(x+1) + .3*(x^2-.1)
}
plot(1:100, func(seq(1,2*pi,length.out = 100)), type = 'l')
func <- function(x){
sin(x) + sqrt(x) - .05*x^2 + cos(x+1)
}
plot(1:100, func(seq(1,2*pi,length.out = 100)), type = 'l')
func <- function(x){
sin(x) + sqrt(x) - .05*x^2 + cos(x+1)
}
curve <- func(seq(1,2*pi,length.out = 100)) + rnorm(100)
plot(1:100, curve, type = 'l')
sin(x) + sqrt(x) - .05*x^2 + cos(x+1)
func <- function(x){
sin(x) + sqrt(x) - .05*x^2 + cos(x+1)
}
func <- function(x){
sin(x) + sqrt(x) - .05*x^2 + cos(x+1)
}
curve <- func(seq(1,2*pi,length.out = 100)) + rnorm(100, 0, .5)
plot(1:100, curve, type = 'l')
curve <- func(seq(1,2*pi,length.out = 100)) #+ rnorm(100, 0, .5)
plot(1:100, curve, type = 'l')
curve <- func(seq(1,2*pi,length.out = 100)) + rnorm(100, 0, .1)
plot(1:100, curve, type = 'l')
curve <- func(seq(1,2*pi,length.out = 100)) + rnorm(100, 0, .2)
plot(1:100, curve, type = 'l')
func <- function(x){
sin(x) + sqrt(x) - .05*x^2 + cos(x+1)
}
curve <- func(seq(0,2*pi,length.out = 100)) + rnorm(100, 0, .2)
plot(1:100, curve, type = 'l')
col.scheme <- c("#C5AAF5", "#A3CBF1", "#79BFA1", "#F5A352", "#FB7374", "#423C40")
library(plotrix)
col.scheme <- c("#C5AAF5", "#A3CBF1", "#79BFA1", "#F5A352", "#FB7374", "#423C40")
?pie3D
pie3D(rep(1/6,6),explode=0, theta=1.2, col=col.scheme, main="colors()")
pie3D(rep(1/6,6),explode=10, theta=1.2, col=col.scheme, main="My scheme")
pie3D(rep(1/6,6),explode=1, theta=1.2, col=col.scheme, main="My scheme")
pie3D(rep(1/6,6),explode=.1, theta=1.2, col=col.scheme, main="My scheme")
pie3D(rep(1/6,6),explode=.01, theta=1.2, col=col.scheme, main="My scheme")
pie3D(rep(1/6,6),explode=0, theta=1, col=col.scheme, main="My scheme")
pie3D(rep(1/6,6),explode=0, theta=1.3, col=col.scheme, main="My scheme")
install.packages("rsvd")
rsvd
library(rsvd)
rsvd
getAnywhere(rsvd)
data(tiger)
tiger
plot(tiger)
image(tiger)
test <- rsvd(tiger, k = 10)
image(test)
str(test)
image(u%*%t(d) %*% d)
image(test$u%*%t(test$d) %*% test$d)
image(test$u%*%diag(test$d) %*% test$d)
dim(tiger)
svd(tiger)
s <- svd(tiger)
dim(s)
str(s)
dim(tiger)
?svd
diag(s$d)
dim(diag(s$d))
X <- s$u %*% diag(s$d) %*% t(s$v)
str(s)
image(X)
image(tiger)
X <- s$u %*% diag(s$d) %*% t(s$v)
idk <- t(s$u) %*% X %*% s$v
image(X)
str(s)
dim(tiger)
?svd
s <- svd(tiger, nu = 3)
str(s)
s <- svd(tiger, nu = 3, nv = 3)
str(s)
X1 <- s$u %*% diag(s$d[1:3]) %*% t(s$v)
image(X1)
?image
topo.colors()
topo.colors
s <- svd(tiger, nu = 15, nv = 15)
X1 <- s$u %*% diag(s$d[1:3]) %*% t(s$v)
image(X1)
X1 <- s$u %*% diag(s$d[1:15]) %*% t(s$v)
image(X1)
s <- svd(tiger, nu = 10, nv = 10)
X1 <- s$u %*% diag(s$d[1:10]) %*% t(s$v)
image(X1, terrain.colors)
?image
image(X1, col = terrain.colors)
image(X1, col = terrain.colors(12))
tiger[1:10,1:10]
library(cleversearch)
??cleversearch
draw.circle
?draw.circle
library(plotrix)
?draw.circle
draw.circle(0,0,1,col = "blue")
plot(1:5,seq(1,10,length=5),type="n",xlab="",ylab="",main="Test draw.circle")
draw.circle(2,4,c(1,0.66,0.33),border="purple",
col=c("#ff00ff","#ff77ff","#ffccff"),lty=1,lwd=1)
draw.circle(2.5,8,0.6,border="red",lty=3,lwd=3)
draw.circle(4,3,0.7,border="green",col="yellow",lty=1,
density=5,angle=30,lwd=10)
draw.circle(3.5,8,0.8,border="blue",lty=2,lwd=2)
plot(xlim = c(-2,2))
plot(1,1,xlim = c(-2,2), ylim = c(-2,2), col = "white")
plot(1,1,xlim = c(-2,2), ylim = c(-2,2), col = NA)
draw.circle(0,0,1,col = "blue")
?draw.ellipse
draw.ellipse(1,1,1,2, col = "orange")
draw.ellipse(1,1,2,1, col = "orange")
?draw.ellipse
draw.ellipse(1,1,2,1, col = "orange", angle = 20)
draw.ellipse(1,1,2,1, col = "orange", angle = 180)
draw.ellipse(1,1,2,1, col = "orange", angle = 90)
plot(1,1,col=NA, xlab = "", ylab = "", xlim = c(-1.5,1.5), ylim = c(-1.5,1.5))
plot(1,1,col=NA, xlab = "", ylab = "",
xlim = c(-1.5,1.5), ylim = c(-1.5,1.5),
xaxt = "n", yaxt = "n")
plot(1,1,col=NA, xlab = "", ylab = "",
xlim = c(-1.5,1.5), ylim = c(-1.5,1.5),
xaxt = "n", yaxt = "n", bty = "n")
draw.circle(0,0,1)
draw.circle(0,0,1,col = "tomato2")
draw.circle(0,0,1,col = "chocolate2")
tomato
plot(1,1,col=NA, xlab = "", ylab = "",
xlim = c(-1.5,1.5), ylim = c(-1.5,1.5),
xaxt = "n", yaxt = "n", bty = "n")
draw.circle(0,0,1,col = "tomato2")
par(mfrow = c(3,1))
plot(1,1,col=NA, xlab = "", ylab = "",
xlim = c(-1.5,1.5), ylim = c(-1.5,1.5),
xaxt = "n", yaxt = "n", bty = "n")
draw.circle(0,0,1,col = "tomato2")
par(mfrow = c(1,1))
plot(1,1,col=NA, xlab = "", ylab = "",
xlim = c(-1.5,1.5), ylim = c(-1.5,1.5),
xaxt = "n", yaxt = "n", bty = "n")
draw.circle(0,0,1,col = "tomato2")
plot(1,1,col=NA, xlab = "", ylab = "",
xlim = c(-1.5,1.5), ylim = c(-1.5,1.5),
xaxt = "n", yaxt = "n", bty = "n")
X <- matrix(c(sqrt(2), 0, 0, sqrt(2)), byrow = T, nrow = 2)
X
X <- matrix(c(sqrt(.5), 0, 0, sqrt(.5)), byrow = T, nrow = 2)
X
X%*%t(X)
X <- diag(2)
X
?arrows
library(wesanderson)
wes_palettes
X <- diag(2)
plot(1,1,col=NA, xlab = "", ylab = "",
xlim = c(-1.5,1.5), ylim = c(-1.5,1.5),
xaxt = "n", yaxt = "n", bty = "n")
draw.circle(0,0,1,col = wes_palette("Zissou"))
?arrows
arrows(0,0,1,0,col = wes_palette("Zissou")[2])
arrows(0,0,1,0,col = wes_palette("Zissou")[3])
arrows(0,0,1,0,col = wes_palette("Zissou")[3], lwd = 3)
arrows(0,0,0,1,col = wes_palette("Zissou")[3], lwd = 3)
plot(0,0,col=NA, xlab = "", ylab = "",
xlim = c(-1.5,1.5), ylim = c(-1.5,1.5),
xaxt = "n", yaxt = "n", bty = "n")
draw.circle(0,0,1,col = wes_palette("Zissou"))
arrows(0,0,1,0,col = wes_palette("Zissou")[3], lwd = 3)
arrows(0,0,0,1,col = wes_palette("Zissou")[3], lwd = 3)
?draw.circle
arrows(0,0,0,1.2,col = wes_palette("Zissou")[3], lwd = 3)
arrows(0,0,0,1.1,col = wes_palette("Zissou")[3], lwd = 3)
plot(0,0,col=NA, xlab = "", ylab = "",
xlim = c(-1.5,1.5), ylim = c(-1.5,1.5),
xaxt = "n", yaxt = "n", bty = "n")
draw.circle(0,0,1,col = wes_palette("Zissou"))
arrows(0,0,.95,0,col = wes_palette("Zissou")[3], lwd = 3)
arrows(0,0,0,1.1,col = wes_palette("Zissou")[3], lwd = 3)
plot(0,0,col=NA, xlab = "", ylab = "",
xlim = c(-1.5,1.5), ylim = c(-1.5,1.5),
xaxt = "n", yaxt = "n", bty = "n")
draw.circle(0,0,1,col = wes_palette("Zissou"))
arrows(0,0,.95,0,col = wes_palette("Zissou")[3], lwd = 3)
arrows(0,0,0,1,col = wes_palette("Zissou")[3], lwd = 3)
plot(0,0,col=NA, xlab = "", ylab = "",
xlim = c(-1.5,1.5), ylim = c(-1.5,1.5),
xaxt = "n", yaxt = "n", bty = "n")
draw.circle(0,0,1,col = wes_palette("Zissou"))
arrows(0,0,.95,0,col = wes_palette("Zissou")[3], lwd = 3)
arrows(0,0,0,1.05,col = wes_palette("Zissou")[3], lwd = 3)
arrows(0,0,0,1.05,col = wes_palette("Zissou")[4], lwd = 3)
arrows(0,0,0,1.05,col = wes_palette("Zissou")[5], lwd = 3)
draw.circle(0,0,1,col = wes_palette("Zissou")[2])
arrows(0,0,.95,0,col = wes_palette("Zissou")[3], lwd = 3)
arrows(0,0,0,1.05,col = wes_palette("Zissou")[5], lwd = 3)
arrows(0,0,0,1.05,col = wes_palette("Zissou")[4], lwd = 3)
draw.circle(0,0,1,col = wes_palette("Zissou")[5])
arrows(0,0,.95,0,col = wes_palette("Zissou")[3], lwd = 3)
arrows(0,0,0,1.05,col = wes_palette("Zissou")[4], lwd = 3)
plot(0,0,col=NA, xlab = "", ylab = "",
xlim = c(-1.5,1.5), ylim = c(-1.5,1.5),
xaxt = "n", yaxt = "n", bty = "n")
draw.circle(0,0,1,col = wes_palette("Zissou")[2])
arrows(0,0,.95,0,col = wes_palette("Zissou")[3], lwd = 3)
arrows(0,0,0,1.05,col = wes_palette("Zissou")[4], lwd = 3)
wes_palettes
draw.circle(0,0,1,col = wes_palette("Royal1")[2])
draw.circle(0,0,1,col = wes_palette("Royal1")[1])
draw.circle(0,0,1,col = wes_palette("Royal1")[3])
draw.circle(0,0,1,col = wes_palette("Royal1")[4])
draw.circle(0,0,1,col = wes_palette("Royal1")[5])
draw.circle(0,0,1,col = wes_palette("Royal1")[6])
draw.circle(0,0,1,col = wes_palette("Royal2")[1])
arrows(0,0,.95,0,col = wes_palette("Royal2")[3], lwd = 3)
arrows(0,0,0,1.05,col = wes_palette("Roayl2")[5], lwd = 3)
arrows(0,0,0,1.05,col = wes_palette("Roayl2")[4], lwd = 3)
arrows(0,0,0,1.05,col = wes_palette("Roayl2")[2], lwd = 3)
arrows(0,0,0,1.05,col = wes_palette("Royal2")[2], lwd = 3)
arrows(0,0,0,1.05,col = wes_palette("Royal2")[4], lwd = 3)
arrows(0,0,0,1.05,col = wes_palette("Royal2")[5], lwd = 3)
arrows(0,0,0,1.05,col = wes_palette("Royal2")[6], lwd = 3)
arrows(0,0,0,1.05,col = wes_palette("Royal2")[2], lwd = 3)
arrows(0,0,0,1.05,col = wes_palette("Royal1")[2], lwd = 3)
arrows(0,0,0,1.05,col = wes_palette("Royal1")[1], lwd = 3)
arrows(0,0,0,1.05,col = wes_palette("Royal1")[3], lwd = 3)
draw.circle(0,0,1,col = wes_palette("Royal2")[1], border = NULL)
arrows(0,0,.95,0,col = wes_palette("Royal2")[3], lwd = 3)
?draw.circle
draw.circle(0,0,1,col = wes_palette("Royal2")[1], border = wes_palette("Royal2")[1])
arrows(0,0,.95,0,col = wes_palette("Royal2")[3], lwd = 3)
arrows(0,0,0,1.05,col = wes_palette("Royal1")[3], lwd = 3)
draw.circle(0,0,1,col = wes_palette("Royal2")[1])
arrows(0,0,.95,0,col = wes_palette("Royal2")[3], lwd = 3)
arrows(0,0,0,1.05,col = wes_palette("Royal1")[3], lwd = 3)
X <- matrix(c(1,.5,0,1), byrow = T, nrow = 2)
X
X <- matrix(c(1,.5,0,1), byrow = T, nrow = 2)
X
?draw.ellipse
draw.ellipse(X)
draw.ellipse(X[,1], X[,2])
draw.ellipse(x=0,y=0, a = X[,1], b = X[,2])
plot(0,0,col=NA, xlab = "", ylab = "",
xlim = c(-1.5,1.5), ylim = c(-1.5,1.5),
xaxt = "n", yaxt = "n", bty = "n")
draw.ellipse(x=0,y=0, a = X[,1], b = X[,2])
t(X) %*% X
draw.ellipse(x=1,y=1.25, a = sqrt(.5), b = sqrt(.5))
plot(c(0,10), c(0,10), type="n", main="test draw.ellipse")
draw.ellipse(c(3,7), c(8,8), c(0.5,1), c(1,0.5), col=c(2,4),
angle=c(45,0), segment=rbind(c(0,45),c(45,360)))
plot(c(0,10), c(0,10), type="n", main="test draw.ellipse")
draw.ellipse(c(3,7), c(8,8), c(0.5,1), c(1,0.5), col=c(2,4),
angle=c(45,0), segment=rbind(c(0,45),c(45,360)))
?svd
hilbert <- function(n) { i <- 1:n; 1 / outer(i - 1, i, "+") }
X <- hilbert(9)[, 1:6]
X
image(X)
(s <- svd(X))
D <- diag(s$d)
s$u %*% D %*% t(s$v) #  X = U D V'
t(s$u) %*% X %*% s$v #  D = U' X V
dim(X)
str(s)
dim(X)
(s <- svd(X, nu=3, nv = 3))
D <- diag(s$d)
s$u %*% D %*% t(s$v) #  X = U D V'
str(s)
u %*% t(v)
s$u %*% t(s$v)
hilbert <- function(n) { i <- 1:n; 1 / outer(i - 1, i, "+") }
hilbert(2)
outer(0:1,1:2,"+")
1/outer(0:1,1:2,"+")
library(tcR)
.05*2/.005
.05*.005
.05*.005/2
.5*2/.005
.5*.005/2
.55*.005/2
.5*.004
.5*.004
.5*.005
.55*.005
1.05*.005
.00275-.0025
install.packages("ineq")
549.17/5
549.17/5*4
549.17-109.834
(549.17-109.834)/4
440.26/2
164.68+263.44
(164.68+263.44)/2
109.84+200+214.06
109.84+200+214.06-70
setwd("~/Box Sync/School/research - Qunhua/Project_1/tcr_package/powerTCR/data")
load("repertoires.Rdata")
save(repertoires, file = "repertoires.rda")
library(powerTCR)
list.files()
library(powerTCR)
data("repertoires.rda")
data("repertoires")
data(repertoires)
